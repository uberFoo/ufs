//! IOFS Messages sent to WASM programs
//!
//! These are file system events that are generated by the file system.
//!
use {
    crate::{uuid::UfsUuid, wasm::RuntimeErrorKind},
    failure,
    log::error,
    wasmer_runtime::{Instance, Value},
};

#[derive(Clone, Eq, Hash, PartialEq)]
pub(crate) enum IofsMessage {
    SystemMessage(IofsSystemMessage),
    FileMessage(IofsFileMessage),
    DirMessage(IofsDirMessage),
}

#[derive(Clone, Eq, Hash, PartialEq)]
pub(crate) enum IofsSystemMessage {
    Shutdown,
    Ping,
}

#[derive(Clone, Eq, Hash, PartialEq)]
pub(crate) enum IofsFileMessage {
    Create(IofsMessagePayload),
    Delete(IofsMessagePayload),
    Open(IofsMessagePayload),
    Close(IofsMessagePayload),
    Write(IofsMessagePayload),
}

#[derive(Clone, Eq, Hash, PartialEq)]
pub(crate) enum IofsDirMessage {
    Create(IofsMessagePayload),
    Delete(IofsMessagePayload),
}

#[derive(Clone, Eq, Hash, PartialEq)]
pub(crate) struct IofsMessagePayload {
    pub(crate) target_id: UfsUuid,
    pub(crate) target_path: String,
    pub(crate) parent_id: UfsUuid,
}

pub(crate) struct WasmMessageSender<'a> {
    instance: &'a mut Instance,
}

impl<'a> WasmMessageSender<'a> {
    pub(crate) fn new(instance: &'a mut Instance, root_id: UfsUuid) -> Self {
        let mut wms = WasmMessageSender { instance };

        let id_str = &format!("{}", root_id);
        wms.write_wasm_memory(0, id_str);

        wms.call_wasm_func(
            "__init",
            Some(&[Value::I32(0), Value::I32(id_str.len() as _)]),
        )
        .expect("error calling init function");
        wms
    }

    pub(crate) fn call_wasm_func(
        &mut self,
        name: &str,
        args: Option<&[Value]>,
    ) -> Result<(), failure::Error> {
        let args = match args {
            Some(a) => a,
            None => &[],
        };

        match self.instance.call(name, args) {
            Ok(_) => Ok(()),
            Err(e) => {
                error!("Error invoking wasm function {}", e);
                Err(RuntimeErrorKind::FunctionInvocation.into())
            }
        }
    }

    pub(crate) fn write_wasm_memory(&mut self, offset: usize, s: &str) {
        let memory = self.instance.context_mut().memory(0);

        for (byte, cell) in s
            .bytes()
            .zip(memory.view()[offset..(offset + s.len()) as usize].iter())
        {
            cell.set(byte);
        }
    }

    pub(crate) fn send_shutdown(&mut self) -> Result<(), failure::Error> {
        self.call_wasm_func("__handle_shutdown", None)
    }

    pub(crate) fn send_ping(&mut self) -> Result<(), failure::Error> {
        self.call_wasm_func("__handle_ping", None)
    }

    pub(crate) fn send_file_create(
        &mut self,
        path: &str,
        id: &UfsUuid,
        parent_id: &UfsUuid,
    ) -> Result<(), failure::Error> {
        self.write_wasm_memory(0, path);

        let id_str_offset = path.len();
        let id_str = &format!("{}", id);
        self.write_wasm_memory(id_str_offset, id_str);

        let parent_id_str_offset = id_str_offset + id_str.len();
        let parent_id_str = &format!("{}", parent_id);
        self.write_wasm_memory(parent_id_str_offset, parent_id_str);

        self.call_wasm_func(
            "__handle_file_create",
            Some(&[
                Value::I32(0),
                Value::I32(path.len() as i32),
                Value::I32(id_str_offset as i32),
                Value::I32(id_str.len() as i32),
                Value::I32(parent_id_str_offset as i32),
                Value::I32(parent_id_str.len() as i32),
            ]),
        )
    }

    pub(crate) fn send_dir_create(
        &mut self,
        path: &str,
        id: &UfsUuid,
    ) -> Result<(), failure::Error> {
        self.write_wasm_memory(0, path);
        let id_str = &format!("{}", id);
        self.write_wasm_memory(path.len(), id_str);
        self.call_wasm_func(
            "__handle_dir_create",
            Some(&[
                Value::I32(0),
                Value::I32(path.len() as i32),
                Value::I32(path.len() as i32),
                Value::I32(id_str.len() as i32),
            ]),
        )
    }

    pub(crate) fn send_file_delete(
        &mut self,
        path: &str,
        id: &UfsUuid,
    ) -> Result<(), failure::Error> {
        self.write_wasm_memory(0, path);
        let id_str = &format!("{}", id);
        self.write_wasm_memory(path.len(), id_str);
        self.call_wasm_func(
            "__handle_file_delete",
            Some(&[
                Value::I32(0),
                Value::I32(path.len() as i32),
                Value::I32(path.len() as i32),
                Value::I32(id_str.len() as i32),
            ]),
        )
    }

    pub(crate) fn send_dir_delete(
        &mut self,
        path: &str,
        id: &UfsUuid,
    ) -> Result<(), failure::Error> {
        self.write_wasm_memory(0, path);
        let id_str = &format!("{}", id);
        self.write_wasm_memory(path.len(), id_str);
        self.call_wasm_func(
            "__handle_dir_delete",
            Some(&[
                Value::I32(0),
                Value::I32(path.len() as i32),
                Value::I32(path.len() as i32),
                Value::I32(id_str.len() as i32),
            ]),
        )
    }

    pub(crate) fn send_file_open(
        &mut self,
        path: &str,
        id: &UfsUuid,
    ) -> Result<(), failure::Error> {
        self.write_wasm_memory(0, path);
        let id_str = &format!("{}", id);
        self.write_wasm_memory(path.len(), id_str);
        self.call_wasm_func(
            "__handle_file_open",
            Some(&[
                Value::I32(0),
                Value::I32(path.len() as i32),
                Value::I32(path.len() as i32),
                Value::I32(id_str.len() as i32),
            ]),
        )
    }

    pub(crate) fn send_file_close(
        &mut self,
        path: &str,
        id: &UfsUuid,
    ) -> Result<(), failure::Error> {
        self.write_wasm_memory(0, path);
        let id_str = &format!("{}", id);
        self.write_wasm_memory(path.len(), id_str);
        self.call_wasm_func(
            "__handle_file_close",
            Some(&[
                Value::I32(0),
                Value::I32(path.len() as i32),
                Value::I32(path.len() as i32),
                Value::I32(id_str.len() as i32),
            ]),
        )
    }

    pub(crate) fn send_file_write(
        &mut self,
        path: &str,
        id: &UfsUuid,
    ) -> Result<(), failure::Error> {
        self.write_wasm_memory(0, path);
        let id_str = &format!("{}", id);
        self.write_wasm_memory(path.len(), id_str);
        self.call_wasm_func(
            "__handle_file_write",
            Some(&[
                Value::I32(0),
                Value::I32(path.len() as i32),
                Value::I32(path.len() as i32),
                Value::I32(id_str.len() as i32),
            ]),
        )
    }
}
